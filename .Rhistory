print(mean(data1[["b.responses"]]) %>% paste("Sample mean:", .))
print(sd(data1[["b.responses"]]) %>% paste("Sample sd:", .))
data2 = ab.collect(1000, 0, 1, 10, 100)
print(mean(data2[["a.responses"]]) %>% paste("Sample mean:", .))
print(sd(data2[["a.responses"]]) %>% paste("Sample sd:", .))
print(mean(data2[["b.responses"]]) %>% paste("Sample mean:", .))
print(sd(data2[["b.responses"]]) %>% paste("Sample sd:", .))
print("We can see that the sample means and standard deviations approximately match the appropriate theoretical values")
test.at.end = function(n, a.mean, a.sd, b.mean, b.sd){
data = ab.collect(n, a.mean, a.sd, b.mean, b.sd)
a = data[["a.responses"]]
b = data[["b.responses"]]
p_value = t.test(a, b)[["p.value"]]
if (p_value <= 0.05) {
if (mean(data[["a.responses"]]) > mean(data[["b.responses"]])){
return("A")
} else {
return("B")
}
}else {
return("Inconclusive")
}
}
test.at.end(n = 2000, a.mean = 100, a.sd = 20, b.mean = 104, b.sd = 10)
test.as.you.go = function(n.per.day, n.days, a.mean, a.sd,  b.mean, b.sd){
for (i in 1:n.days){
total.samples = n.per.day * n.days
collected.samples = 0
a.responses = numeric()
b.responses = numeric()
while (collected.samples < total.samples) {
new.data = ab.collect(n.per.day, a.mean, a.sd, b.mean, b.sd)
a.responses = c(a.responses, new.data[["a.responses"]])
b.responses = c(b.responses, new.data[["b.responses"]])
p_value = t.test(a.responses, b.responses)[["p.value"]]
if (p_value <= 0.05) {
if (mean(a.responses) > mean(b.responses)) {
return(list(winner = "A", samples = collected.samples))
} else {
return(list(winner = "B", samples = collected.samples))
}
}
collected.samples = collected.samples + n.per.day
}
return(list(winner = "Inconclusive", samples = total.samples))
}
}
test.as.you.go(n.per.day = 100, n.days = 20, a.mean = 100, a.sd = 20, b.mean = 104, b.sd = 10)
print("Yes, I get the same result and save time collecting data")
set.seed(1)
print("As the true distributions of A and B are the same, we regard all A and B as fasle positive outputs.")
once.num.vec = c(0, 0, 0)
for (i in 1:1000){
if (test.at.end(2000, 100, 20, 100, 20) == "A"){
once.num.vec = once.num.vec + c(1, 0, 0)
}else{
if (test.at.end(2000, 100, 20, 100, 20) == "B"){
once.num.vec = once.num.vec + c(0, 1, 0)
}else{
once.num.vec = once.num.vec + c(0, 0, 1)
}
}
}
once.false.positive = (once.num.vec[1] + once.num.vec[2]) / 1000
print(paste("The false positive rate of test.at.end() is:", once.false.positive))
go.num.vec = c(0, 0, 0)
for (i in 1:1000){
if (test.as.you.go(100, 20, 100, 20, 100, 20)[["winner"]] == "A"){
go.num.vec = go.num.vec + c(1, 0, 0)
}else{
if (test.as.you.go(100, 20, 100, 20, 100, 20)[["winner"]] == "B"){
go.num.vec = go.num.vec + c(0, 1, 0)
}else{
go.num.vec = go.num.vec + c(0, 0, 1)
}
}
}
go.false.positive = (go.num.vec[1] + go.num.vec[2]) / 1000
print(paste("The false positive rate of test.as.you.go() is:", go.false.positive))
print("For the test.at.end() function, the false positive rate is 0.043, which is around 0.05, so false positives are controlled as expected; but for the test.as.you.go() function, the false positive rate is 0.26, which is much larger than 0.05, so false positives are not controlled as expected.")
print("I think for the test.as.you.go() function, we use a very large sample size = 2000, which will certainly reduce the posibility to draw wrong conclusions, but the corresponding time and space usage will be larger. For the test.as.you.go() function, though we reduce the needed sample size to save time and space usage, but as sample sizes become smaller, it will be affected by some randomness, thus increases the prosibility to draw wrong conclusions.")
pros.df = read.table("pros.dat")
dim(pros.df)
head(pros.df, 3)
min.val = min(pros.df$lcp)
pros.df.subset = subset(pros.df, lcp > min.val)
for(i in 1:ncol(pros.df.subset)) {
hist(pros.df.subset[, i], main = paste("Histogram of", names(pros.df.subset)[i]), xlab = names(pros.df.subset)[i], col = "lightblue", breaks=20)
}
print("In general, the distributions seem to be less Normal compared to the distributions from the lecture. The frequencies are much smaller than the ones from the lecture as well, since it is a subset of the original `pros.df`.")
pros.sub.cor = cor(pros.df.subset)
print(pros.sub.cor)
print("The top one highest correlation is between lcavol and lcp, 0.80497276")
print("The top two highest correlation is between svi and lcp, 0.62463822")
pros.sub.cor = cor(pros.df.subset)
heatmap(pros.sub.cor)
pros.lm = lm(lpsa ~ lcavol, data = pros.df)
print("For full pros.df:")
coef(pros.lm)
pros.subset.lm = lm(lpsa ~ lcavol, data = pros.df.subset)
print("For sub pros.df:")
coef(pros.subset.lm)
print("In general, they are close to each other (slightly different).")
plot(pros.df$lcavol, pros.df$lpsa, xlab = "log(cancer volume)", ylab = "log(PSA score)",
pch = 20, col = "black")
points(pros.df.subset$lcavol, pros.df.subset$lpsa, pch = 20, col = "red")
abline(pros.lm, col = "black", lwd = 2)
abline(pros.subset.lm, col = "red", lwd = 2)
legend("bottomright", legend = c("All data", "Subset data"), pch = 20,
col = c("black", "red"), bty = "n", cex = 1)
title("Relationship between log(cancer volume) and log(PSA score)")
#Here we use the full pros.df dataframe.
no.svi = subset(pros.df, svi == 0)
svi = subset(pros.df, svi == 1)
no.svi.lm = lm(lpsa ~ lcavol, no.svi)
svi.lm = lm(lpsa ~ lcavol, svi)
print("For no.svi:")
coef(no.svi.lm)
print("For svi:")
coef(svi.lm)
print("We can see their slopes are close, but their interprets are quite different.")
plot(no.svi$lcavol, no.svi$lpsa, xlab = "log(cancer volume)", ylab = "log(PSA score)",
pch = 20, col = "black")
points(svi$lcavol, svi$lpsa, pch = 20, col = "red")
abline(no.svi.lm, col = "black", lwd = 2)
abline(svi.lm, col = "red", lwd = 2)
legend("bottomright", legend = c("no.svi", "svi"), pch = 20,
col = c("black", "red"), bty = "n", cex = 1)
title("Relationship between log(cancer volume) and log(PSA score)")
wage.df = read.csv("wage.csv", stringsAsFactors = TRUE, skip = 16)
dim(wage.df)
head(wage.df, 3)
factor.vars = sapply(wage.df, is.factor)
factor.names = names(factor.vars[factor.vars])
for (var in factor.names) {
barplot(table(wage.df[[var]]), main = var, xlab = "", ylab = "Frequency")
}
print("We can see sex and region only have one type, which can be ignored in further analysis.")
print("The married dominates in maritl factor. The white dominates in race factor.")
numeric.vars = sapply(wage.df, is.numeric)
numeric.names = names(numeric.vars[numeric.vars])
for (var in numeric.names) {
hist(wage.df[[var]], main = var, xlab = "", ylab = "Frequency", breaks=8)
}
print("We can see that 2003-2004 dominates in year factor.")
print("Age factor is similar to a normal distribution. And wage factor mostly concentrates between 50-150.")
wage.lm = lm(wage ~ year + age, data = wage.df)
coef(wage.lm)
print("Yes, they have the signs I expect. Because with the economic development, as the year goes by, the wage will increase; with the age increasing, the working experience become longer, the wage will increase")
summary(wage.lm)
print("Standard errors:")
print(wage.sum$coefficients[, "Std. Error"])
print("P-values:")
print(wage.sum$coefficients[, "Pr(>|t|)"])
print("They p values are both very small, so both of these predictors appear to be significant.")
wage.sum = summary(wage.lm)
wage.se = wage.sum$coefficients[, "Std. Error"]
wage.se
plot(wage.lm)
print("Yes, there are some groups of points away from the main bulk of points along the x-axis")
new.wage = subset(wage.df, wage <= 250)
wage.lm.lt250 = lm(wage ~ year + age, data = new.wage)
wage.lm.lt250.sum = summary(wage.lm.lt250)
wage.lm.lt250.sum
print("Coefficients:")
coef(wage.lm.lt250)
print("Standard errors:")
print(wage.lm.lt250.sum$coefficients[, "Std. Error"])
print("P-values:")
print(wage.lm.lt250.sum$coefficients[, "Pr(>|t|)"])
print("These coefficients are different than before. The predictors `year` and `age` are still significant")
plot(wage.lm.lt250)
print("The 'Residuals vs Fitted', 'Normal Q-Q', 'Scale-location', and 'Residuals vs Leverage' plots don't have the same problems as before")
predict(wage.lm.lt250, newdata = data.frame(age = 30, year = 2023))
predict(wage.lm.lt250, newdata = data.frame(age = 25, year = 2028))
print("Because in wage.df, years are mostly etween 2000-2010, the model may have relatively worse performance on far future years wage prediction. As 2023 is closer to 2000-2010 than 2028, I think first one is more accurate.")
new.wage.df = wage.df
new.wage.df$indicator = as.integer(new.wage.df$wage > 250)
wage.glm = glm(indicator ~ year + age, data = new.wage.df, family="binomial")
wage.glm.sum = summary(wage.glm)
wage.glm.sum
print("Coefficients:")
coef(wage.glm)
print("Standard errors:")
print(wage.glm.sum$coefficients[, "Std. Error"])
print("P-values:")
print(wage.glm.sum$coefficients[, "Pr(>|z|)"])
print("This time, only age is significant.")
wage.glm = glm(indicator ~ year + age + education, data = new.wage.df, family="binomial")
summary(wage.glm)
coef(wage.glm)
print("4 coefficients are associated with education in the end. When a categorical variable is included in a regression model, it is represented by a set of indicator variables, where each indicator variable corresponds to a level of the variable.")
table(wage.df$education, wage.df$indicator)
table(wage.df$education)
print("We can see that '< HS Grad' fail to meet this criterion. '< HS Grad' is incomplete. 'HS Grad', '2. Some College', '3. College Grad', '4. Advanced Degree' are complete.")
wage.glm = glm(indicator ~ year + age + education, data = new.wage.df, family="binomial")
summary(wage.glm)
coef(wage.glm)
print("4 coefficients are associated with education in the end. When a categorical variable is included in a regression model, it is represented by a set of indicator variables, where each indicator variable corresponds to a level of the variable. Originally education has 5 categories, but 'education 1. < HS Grad' is incomplete, therfore is missing, see 8c.")
table(wage.df$education, wage.df$education)
print("We can see that '1. < HS Grad' fail to meet this criterion. '1. < HS Grad' is incomplete. '2. HS Grad', '3. Some College', '4. College Grad', '5. Advanced Degree' are complete.")
table(new.wage.df$indicator, new.wage.df$education)
print("We can see that '1. < HS Grad' fail to meet this criterion. '1. < HS Grad' is incomplete. '2. HS Grad', '3. Some College', '4. College Grad', '5. Advanced Degree' are complete.")
table(new.wage.df$education, new.wage.df$indicator)
print("We can see that '1. < HS Grad' fail to meet this criterion. '1. < HS Grad' is incomplete. '2. HS Grad', '3. Some College', '4. College Grad', '5. Advanced Degree' are complete.")
complete.wage.df = subset(new.wage.df, education != '1. < HS Grad')
wage.glm = glm(indicator ~ year + age + education, data = new.wage.df, family="binomial")
summary(wage.glm)
print("'education4. College Grad', 'education5. Advanced Degree' become more significant, according to their p-values")
complete.wage.df = subset(new.wage.df, education != '1. < HS Grad')
wage.glm = glm(indicator ~ year + age + education, data = new.wage.df, family="binomial")
summary(wage.glm)
print(summary(wage.glm)$coefficients[, "Pr(>|z|)"])
print("'education4. College Grad', 'education5. Advanced Degree' become more significant, according to their p-values")
complete.wage.df = subset(new.wage.df, education != '1. < HS Grad')
wage.glm = glm(indicator ~ year + age + education, data = complete.wage.df, family="binomial")
summary(wage.glm)
print(summary(wage.glm)$coefficients[, "Pr(>|z|)"])
print("No predictor become more significant, according to their p-values.")
complete.wage.df = subset(new.wage.df, education != '1. < HS Grad')
wage.glm = glm(indicator ~ year + age + education, data = complete.wage.df, family="binomial")
summary(wage.glm)
print(summary(wage.glm)$coefficients[, "Pr(>|z|)"])
print("All predictors become more significant except from 'age'. The 'education4. College Grad', 'education5. Advanced Degree' become much much more significant than before.")
library(gam)
library(gam)
library(gam)
wage.gam<-gam(indicator ~ year + s(age) + education, family = "binomial",data = wage.df)
library(gam)
wage.gam<-gam(indicator ~ year + s(age) + education, family = "binomial",data = new.wage.df)
summary(wage.gam)
library(gam)
wage.gam<-gam(indicator ~ year + s(age) + education, family = "binomial",data = new.wage.df)
summary(wage.gam)
print("The 'age' variable becomes less significant")
plot(wage.gam)
probility = predict(wage.gam, newdata = data.frame(age = 30, year = 2018, education="5. Advanced Degree"), type = "response")
probility
newdata = data.frame(year = 2023, age = 32, education = "5. Advanced Degree")
prob = 0
current_year = newdata$year
while (prob < 0.2) {
current_year <- current_year + 1
newdata$year <- current_year
prob <- predict(wage.gam, newdata = newdata, type = "response")
}
years_to_wait <- current_year - newdata$year
cat("The person has to wait", years_to_wait, "years to have a predicted probability of at least 20% of earning over $250,000 in a year.")
newdata = data.frame(year = 2023, age = 32, education = "5. Advanced Degree")
prob = 0
current_year = newdata$year
while (prob < 0.2) {
current_year <- current_year + 1
newdata$year <- current_year
prob <- predict(wage.gam, newdata = newdata, type = "response")
}
years_to_wait <- current_year - newdata$year
cat("The person has to wait", years_to_wait, "years to have a predicted probability of at least 20% of earning over $250,000 in a year.")
future_years = data.frame(year = seq(2023, 2043, by = 1))
future_years$age = mean(wage.df$age)
future_years$education = "5. Advanced Degree"
future_probs = predict(wage.gam, newdata = future_years, type = "response")
plot(future_years$year, future_probs, type = "l",
xlab = "Year", ylab = "Probability of earning over $250,000",
main = "Probability of earning over $250,000 for a 32-year-old with a Ph.D.")
print("The plot is strictly increasing.")
set.seed(1)
x1 = rnorm(1000, 0, 1)
head(x1)
x2 = rbeta(20, 0.1, 0.1)
head(x2)
x3 = sample(c("A", "G", "C", "T"), 2000, replace = TRUE, prob = c(0.25, 0.25, 0.25, 0.25))
head(x3)
#x = runif(100, 0, 1)
x4 = data.frame(x = runif(100, 0, 1), y = runif(100, 0, x))
head(x4)
set.seed(1)
x1 = rnorm(1000, 0, 1)
head(x1)
x2 = rbeta(20, 0.1, 0.1)
head(x2)
x3 = sample(c("A", "G", "C", "T"), 2000, replace = TRUE, prob = c(0.25, 0.25, 0.25, 0.25))
head(x3)
x = runif(100, 0, 1)
x4 = data.frame(x, y = runif(100, 0, x))
head(x4)
set.seed(1)
x1 = rnorm(1000, 0, 1)
head(x1)
x2 = rbeta(20, 0.1, 0.1)
head(x2)
x3 = sample(c("A", "G", "C", "T"), 2000, replace = TRUE, prob = c(0.25, 0.25, 0.25, 0.25))
head(x3)
x = runif(100, 0, 1)
x4 = data.frame(x, y = runif(100, 0, x))
head(x4)
set.seed(1)
x1 = rnorm(1000, 0, 1)
head(x1)
x2 = rbeta(20, 0.1, 0.1)
head(x2)
x3 = sample(c("A", "G", "C", "T"), 2000, replace = TRUE, prob = c(0.25, 0.25, 0.25, 0.25))
head(x3)
d<-data.frame(x=runif(100,0,1))
d$y <- runif(1,0,d$x)
head(d)
x = runif(100, 0, 1)
x4 = data.frame(x, y = runif(100, 0, x))
head(x4)
set.seed(1)
x1 = rnorm(1000, 0, 1)
head(x1)
x2 = rbeta(20, 0.1, 0.1)
head(x2)
x3 = sample(c("A", "G", "C", "T"), 2000, replace = TRUE, prob = c(0.25, 0.25, 0.25, 0.25))
head(x3)
x = runif(100, 0, 1)
x4 = data.frame(x, y = runif(100, 0, x))
head(x4)
devtools::document()
devtools::load_all()
library(Movies.Recommender)
score_prediction("linear regression", newdata = data.frame(budget = 10000000, runtime = 120, votes = 2000, gross = 1000000))
devtools::document()
devtools::load_all()
score_prediction("linear regression", newdata = data.frame(budget = 10000000, runtime = 120, votes = 2000, gross = 1000000))
library(Movies.Recommender)
score_prediction("linear regression", newdata = data.frame(budget = 10000000, runtime = 120, votes = 2000, gross = 1000000))
score_prediction("linear regression", newdata = data.frame(budget = 10000000, runtime = 120, votes = 2000, gross = 1000000))
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
testthat::test_dir('tests')
testthat::test_dir('tests')
testthat::test_dir('tests')
testthat::test_dir('tests')
testthat::test_dir('tests')
testthat::test_dir('tests')
testthat::test_dir('tests')
testthat::test_dir('tests')
devtools::check()
devtools::check()
testthat::test_dir('tests')
devtools::document()
devtools::load_all()
testthat::test_dir('tests')
devtools::check()
devtools::document()
devtools::load_all()
testthat::test_dir('tests')
devtools::check()
?test_that
testthat::test_dir('tests')
devtools::check()
conflict(test_that)
testthat::test_dir('tests')
?test_that
?test_that
use_testthat()
usethis::use_testthat()
devtools::document()
devtools::load_all()
testthat::test_dir('tests')
testthat::test()
testthat::auto_test()
devtools::test()
devtools::test()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
devtools::check()
movie_data
ncol(movie_data)
devtools::check()
devtools::document()
devtools::check()
testthat::test_dir('tests')
load("~/Desktop/Movie.Recommender/R/.RData")
movie_data = read.csv("data/movie_data.csv")
usethis::use_data(movie_data)
movie_data = read.csv("data/movie_data.csv")
movie_data = read.csv("data/movie_data.csv")
usethis::use_data(movie_data)
Jack = read.csv("data/Jack.txt")
usethis::use_data(Jack)
Rose = read.table("data/Rose.txt")
usethis::use_data(Rose)
Jack = read.table("data/Jack.txt")
usethis::use_data(Jack)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
?Jack
?movie_data
devtools::check()
movie_data = read.csv("data/movie_data.csv")
View(movie_data)
movie_data$name = iconv(movie_data$name, to = "ASCII//TRANSLIT")
usethis::use_data(movie_data)
usethis::use_data(movie_data)
devtools::document()
devtools::load_all()
devtools::check()
movie_data = read.csv("data/movie_data.csv")
movie_data$name = iconv(movie_data$name, to = "ASCII//TRANSLIT")
movie_data$director = iconv(movie_data$director, to = "ASCII//TRANSLIT")
usethis::use_data(movie_data)
devtools::document()
devtools::check()
movie_data = read.csv("data/movie_data.csv")
movie_data$name = iconv(movie_data$name, to = "ASCII//TRANSLIT")
movie_data$director = iconv(movie_data$director, to = "ASCII//TRANSLIT")
movie_data$genre = iconv(movie_data$genre, to = "ASCII//TRANSLIT")
movie_data$writer = iconv(movie_data$writer, to = "ASCII//TRANSLIT")
movie_data$star = iconv(movie_data$star, to = "ASCII//TRANSLIT")
movie_data$released = iconv(movie_data$released, to = "ASCII//TRANSLIT")
movie_data$country = iconv(movie_data$country, to = "ASCII//TRANSLIT")
movie_data$company = iconv(movie_data$company, to = "ASCII//TRANSLIT")
usethis::use_data(movie_data)
devtools::document()
devtools::load_all()
devtools::check()
devt
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
?reco
devtools::document()
devtools::load_all()
devtools::check()
?predict
devtools::document()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
?graphics
?testthat
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
.Last.error
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::check()
devtools::load_all()
devtools::check()
?evaluationScheme
evaluationScheme
devtools::document()
devtools::load_all()
devtools::check()
?as
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
.Last.error
top_movies_comparison(1900, 2020, "score", 20)
?ddply
top_movies_comparison(1900, 2020, "score", 20)
plyr::.
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::check()
?last_plot
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::document()
devtools::load_all()
devtools::check()
